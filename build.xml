<?xml version="1.0"?>

<project name="agavi" basedir="." default="main">

	<!-- set up some stuff -->
  <property environment="env"/>
  <property file="build.properties"/>
  <property name="package"  value="${phing.project.name}" override="true" />
  <property name="builddir" value="build" override="true" />
  <property name="srcdir"   value="${project.basedir}" override="true" />
	<taskdef classname="etc.phing.AgaviPackageTask" name="agavipackage"/>
	<taskdef classname="etc.phing.AgaviOlsonCompileTask" name="agaviolsoncompile"/>
	<taskdef classname="src.buildtools.phing.AgaviTestTask" name="agavitest"/>

  <!-- fileset for -dist files -->
  <fileset dir="." id="distfiles">
		<include name="**/*-dist"/>
  </fileset>

  <!-- main target -->
	<target name="main" description="main target">
		<echo msg="available targets: " /> 
		<echo msg=" docs             : regenerate all documentation" />
		<echo msg="  apidocs         : regenerate API docs" />
		<echo msg="  manuals         : regenerate manuals" />
		<echo msg=" packages         : generate all packages" />
		<echo msg="  pagacke-zip     : generate .zip package" />
		<echo msg="  package-pear    : generate PEAR package" />
		<echo msg="  package-apidocs : generate API docs package" />
		<echo msg="  package-manuals : generate manuals package" />
		<echo msg=" test    : run unit test suite" />
		<echo msg=" clean   : clean out cruft" />
	</target>

	<target name="docs" description="generate API docs and manuals">
		<phingcall target="apidocs" />
		<phingcall target="manuals" />
	</target>
	
	<target name="apidocs" description="API docs">
		<phpdoc title="Agavi Documentation" destdir="apidocs" sourcepath="src" output="HTML:frames:earthli"/>
	</target>
	
	<target name="manuals" description="generate all manuals">
		<phingcall target="manual-cookbook" />
		<phingcall target="manual-introduction" />
		<phingcall target="manual-manual" />
		
		<!-- the idea is that the output variant, e.g. html, html-onepage or fo, is passed in via build.properties or as a command line argument (phing manuals -Doutput=html_onepage or whatever) -->
	</target>
	
	<target name="manual-cookbook">
	</target>

	<target name="manual-introduction">
	</target>

	<target name="manual-manual">
	</target>

	<target name="manual-html" >
		<mkdir dir="manual/cookbook/html/multipage" />
		<mkdir dir="manual/introduction/html/multipage" />
		<mkdir dir="manual/manual/html/multipage" />
		<copy file="docs/lib/agavi-manual.css" todir="manual/cookbook/html/multipage" overwrite="true" />
		<copy file="docs/lib/agavi-manual.css" todir="manual/introduction/html/multipage" overwrite="true" />
		<copy file="docs/lib/agavi-manual.css" todir="manual/manual/html/multipage" overwrite="true" />
		<xslt todir="manual/cookbook/html/multipage" style="docs/lib/agavi-manual-html.xsl">
			<fileset dir="docs/cookbook">
				<include name="*.xml" />
			</fileset>
		</xslt>
	</target>

	<target name="manual-html-onepage" >
		<mkdir dir="manual/manual/html/onepage" />
		<copy file="docs/lib/agavi-manual.css" todir="manual-html" overwrite="true" />
		<xslt file="docs/docbook/manual.xml" todir="manual-html" style="docs/lib/agavi-manual-html-onepage.xsl" />
	</target>
	
	<target name="manual-fo" >
		<mkdir dir="manual-fo" />
		<xslt file="docs/docbook/manual.xml" tofile="manual-fo/manual.fo" style="docs/lib/agavi-manual-fo.xsl" />
	</target>
	
	<target name="package-zip">
		<!-- zip a release package -->
	</target>
	
	<target name="package-apidocs">
		<phingcall target="apidocs" />
		<!-- now zip that -->
	</target>

	<target name="package-manuals">
		<phingcall target="manuals" />
		<!-- now zip that -->
	</target>

	<target name="package-pear" description="build pear package">
		<!-- prepare -->
		<delete dir="${builddir}" includeemptydirs="true" verbose="true" failonerror="false" />
		<mkdir dir="${builddir}" />
		<copy todir="${builddir}">
			<fileset dir="src/">
				<exclude name="**/*.svn" />
				<include name="**/**" />
			</fileset>
		</copy>
		<mkdir dir="${builddir}/samples" />
		<copy todir="${builddir}/samples">
			<fileset dir="samples/">
				<exclude name="**/*.svn" />
				<include name="**/**" />
			</fileset>
		</copy>
		<copy file="API_CHANGELOG" todir="${builddir}" />
		<copy file="CHANGELOG" todir="${builddir}" />
		<copy file="COPYRIGHT" todir="${builddir}" />
		<copy file="INSTALL" todir="${builddir}" />
		<copy file="KNOWN_ISSUES" todir="${builddir}" />
		<copy file="LICENSE" todir="${builddir}" />
		<copy file="LICENSE-AGAVI" todir="${builddir}" />
		<copy file="LICENSE-ICU" todir="${builddir}" />
		<copy file="LICENSE-TANGO_ICON_THEME" todir="${builddir}" />
		<copy file="LICENSE-UNICODE_CLDR" todir="${builddir}" />
		<copy file="RELEASE_NOTES" todir="${builddir}" />
		<copy file="TODO" todir="${builddir}" />
		<mkdir dir="${builddir}/scripts" />
		<copy file="etc/agavi-dist" todir="${builddir}/scripts" />
		<copy file="etc/agavi.bat-dist" todir="${builddir}/scripts" />

		<!-- generate package.xml -->
		<agavipackage dir="${builddir}" />

		<echo msg="package.xml generated to '${builddir}'. Use &quot;pear package&quot; to create the package." />
	</target>

	<target name="test" description="run test suite">
		<agavitest exit="true"/>
	</target>

	<target name="clean" description="clean out the cruft">
		<delete dir="build" includeemptydirs="true" failonerror="true" />
		<delete dir="apidocs" includeemptydirs="true" quiet="true" failonerror="false" />
		<delete file="tests.html" includeemptydirs="true" quiet="true" failonerror="false" />
	</target>

	<target name="olson" description="build timezone datebase">
		<agaviolsoncompile olsonDir="${srcdir}/etc/olson/tzdata" outputDir="${srcdir}/src/translation/data/timezones" />
	</target>

	<target name="damagecontrol" description="damagecontrol target">
		<phingcall target="docs"/>
		<phingcall target="package"/>
		<agavitest exit="true" outfile="tests.html" reporter="html"/>
		<!-- sync docs, packages, tests.html -->
	</target>

</project>
