<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<book>
  <title>The Agavi Cookbook</title>

  <chapter>
    <title>Best Practices</title>

    <section>
      <title>Separating Business and Presentation Logic</title>

      <para></para>
    </section>

    <section>
      <title>Sharing and Passing Around Data Inside Your Application</title>

      <para></para>
    </section>

    <section>
      <title>Decorators and Slots</title>

      <para>why decorate, setting up slots, passing around data between
      slots</para>
    </section>
  </chapter>

  <chapter>
    <title>Popular Recipes</title>

    <section>
      <title>Removing the "index.php" Part From URLs</title>

      <para>You need mod_rewrite for Apache or something similar for other web
      servers, such as ISAPI_Rewrite for Microsoft IIS to get rid of the
      "index.php" part in incoming and generated URLs.</para>

      <section>
        <title>Apache with mod_rewrite</title>

        <para>Make sure mod_rewrite is enabled and the required AllowOverride
        settings are active, and rename <filename>dist.htaccess</filename> to
        <filename>.htaccess</filename> in your <filename>pub</filename>
        directory which has the the following contents:</para>

        <para><programlisting># rename this file to .htaccess to remove the necessity to have index.php in front of routes
# make sure mod_rewrite is on and AllowOverride settings are okay

# these two aren't really necessary
DirectoryIndex index.php
Options -MultiViews -Indexes

&lt;IfDefine APACHE2&gt;
AcceptPathInfo On
&lt;/IfDefine&gt;

&lt;IfModule mod_rewrite.c&gt;
# enable rewrite engine
RewriteEngine Off

# ********** THIS IS THE ONLY SETTING YOU SHOULD HAVE TO CHANGE **********
RewriteBase /WEBSERVER/PATH/TO/pub/
# e.g. RewriteBase /~dzuelke/_projects/agavi/trunk/samples/pub/
# usually just "/" if your application's pub dir is the document root

# if requested url does not exist (i.e. it's likely an agavi route), pass it as path info to index.php
RewriteRule ^$ index.php?/ [QSA,L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule (.*) index.php?/$1 [QSA,L]
&lt;/IfModule&gt;</programlisting></para>

        <para>All you must do is enable rewriting:</para>

        <para><programlisting>RewriteEngine On</programlisting></para>

        <para>and change the rewrite base to point to your pub directory URL
        path:</para>

        <para><programlisting>RewriteBase /projects/myproject/pub/</programlisting></para>

        <para>The important thing is that you use the
        <emphasis>external</emphasis> path to the <filename>pub</filename>
        directory as the RewriteBase, i.e. the path that you would have to
        enter in your web browser location bar to reach the index page. If the
        <filename>pub</filename> directory is the document root, then the
        RewriteBase is just <filename>/</filename>.</para>

        <para>The RewriteCond is a condition that executes the following
        RewriteRule if the requested filename (that is the incoming URL
        already mapped to a filesystem name by Apache) does
        <emphasis>not</emphasis> exist. If the requested URL exists, for
        instance, when an image on the webserver is requested, Agavi won't be
        called. Otherwise, the framework is started and the given URL is
        handed to Agavi as so-called Path Info which the WebRouting will use
        to match a route.</para>
      </section>

      <section>
        <title>LightTPD</title>

        <para>In your <filename>lighttpd.conf</filename>, add the following
        lines (this example assumes that our project is in
        <filename>/~cbrown/projects/win-a-baseball-match/</filename>):</para>

        <para><programlisting>url.rewrite-once = ( 
  "^<filename>/~cbrown/projects/win-a-baseball-match/</filename>pub/([^?]*)(?:\?(.*))?$" =&gt; "<filename>/~cbrown/projects/win-a-baseball-match/</filename>pub/index.php?/$1&amp;$2"
)</programlisting></para>

        <para>While the pattern looks a bit ugly-ish, it is strongly
        recommended that you don't use your own in order for the routing to
        work reliably. Don't worry, it's been engineered by a German, it won't
        let you down.</para>

        <para>However, we're not there yet. The pattern works and does it's
        job, but unfortunately, it's a bit overzealus and will rewrite any
        URL. That's not exactly what we want, because our images, stylesheets
        and other static files must remain accessible. So we have to add
        another rewrite that catches URLs that shouldn't be rewritten, in our
        case any that begins on "modpub", "img", "css" or "files":</para>

        <para><programlisting>url.rewrite-once = ( 
  "^/~cbrown/projects/win-a-baseball-match/pub/(modpub|img|css|files).*" =&gt; "$0", 
  "^<filename>/~cbrown/projects/win-a-baseball-match/</filename>pub/([^?]*)(?:\?(.*))?$" =&gt; "<filename>/~cbrown/projects/win-a-baseball-match/</filename>pub/index.php?/$1&amp;$2"
)</programlisting></para>
      </section>

      <section>
        <title>Microsoft IIS with ISAPI_Rewrite</title>

        <para></para>
      </section>
    </section>

    <section>
      <title>Serving "application/xhtml+xml" to capable browsers</title>

      <para></para>
    </section>

    <section>
      <title>Propel Integration</title>

      <para>simple</para>
    </section>

    <section>
      <title>Cookie-Based Auto-Login</title>

      <para></para>
    </section>

    <section>
      <title>Redirecting back to the originally requested page after
      login</title>

      <para></para>
    </section>

    <section>
      <title>Serving Output Variants of the Same Content</title>

      <para>a quick example using a LatestProductsAction or whatever</para>
    </section>
  </chapter>

  <chapter>
    <title>In-Depth Tutorials</title>

    <section>
      <title>Populating and Validating Forms</title>

      <para>explain the FormPopulationFilter</para>
    </section>

    <section>
      <title>Caching</title>

      <para>document the execution filter here, with examples, explanation of
      how decorators are cached or not and slots can be included, variable
      caching, groups, request methods, cache lifetime</para>
    </section>

    <section>
      <title>Routing Examples</title>

      <para></para>
    </section>

    <section>
      <title>Adding an XMLRPC or Other Interface to Your Web
      Application</title>

      <para>walk people through the basic steps/ideas</para>
    </section>
  </chapter>
</book>