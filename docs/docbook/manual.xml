<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<book>
  <title>The Definitive Guide to Agavi</title>

  <preface>
    <title>Preface</title>

    <para>Welcome to the <productname>Agavi</productname> manual. This book
    tries to serve you as the definitive guide to the
    <productname>Agavi</productname> framework. It contains a "Getting
    Started" guide, a comprehensive introduction to the concept and usage of
    Agavi, and a reference manual that documents all aspects of the framework.
    A separate "Best Practices" book accompanies this guide. Also, there's the
    "Introduction to Agavi" book, which gives you an idea of the philosophy
    behind Agavi, and the way it works as a "big picture".</para>
  </preface>

  <chapter>
    <title>Getting Started</title>

    <section>
      <title>Introduction</title>

      <para><productname>Agavi</productname> is a Web Application Framework
      for <productname>PHP</productname> <productnumber>5</productnumber>.
      While it lies in the nature of a framework to simplify the application
      development process, Agavi won't do that at any cost. The primary goals
      are flexibility, cleanliness and structure. You won't find HTML Form
      helper methods in Agavi (because they aren't necessary, we have
      something better, more on that later), and we use XML configuration
      files because we believe that they offer better structuring abilites
      than alternatives such as YAML. If you're looking for a solution that
      assists you in serious high-end development, that has smart and
      innovative solutions to common problems that haven't been solved
      properly before, and that encourages and enforces a clean development
      process to ensure your code remains maintainable and extensible, you've
      come to the right place.</para>
    </section>

    <section>
      <title>Prerequisites</title>

      <para>Agavi's minimum requirement is PHP version 5.1.0 or newer. DOM,
      Reflection and SPL extensions are required, but should be enabled by
      default, unless you're using one of these Linux distros made by
      <emphasis role="strikethrough">stupid morons</emphasis> smart people who
      think they know better.</para>

      <para><note>
          <para>It should be pointed out that Agavi is not a framework for
          beginners. To leverage the functionality and the advantages of it's
          structure and philosophy, a good knowledge of PHP is required, and
          it's highly recommended that you are familiar with concepts such as
          MVC, and (web) application development in general.</para>
        </note>Also, you usually need a web server, such as Apache, unless you
      only want to write a console application. Agavi should work fine with
      all web servers that support PHP. Apache versions 1 and 2, LightTPD and
      Microsoft Internet Information Server have been tested and verified to
      be compatible with the framework and it's components, such as the
      routing.</para>

      <para>If you want to install Agavi via PEAR, you do, obviously, need
      PEAR installed. If you'd like to grab it straight from the SVN
      repository, you'll need a Subversion client installed, of course. Either
      way, we recommend you have Phing installed, because creating a project,
      actions, view and all these things by hand becomes utterly annoying over
      time, and the command line utility uses Phing to relieve you of that
      burden.</para>
    </section>

    <section>
      <title>Installation</title>

      <section>
        <title>PEAR</title>

        <para>Agavi uses a <productname>PEAR Channel</productname> for release
        distribution. In order to be able to install releases via
        <productname>PEAR</productname>, you have to discover the
        <productname>Agavi PEAR Channel</productname> first:</para>

        <para><command>pear channel-discover pear.agavi.org</command></para>

        <para>Now you're ready to install Agavi:</para>

        <para><command>pear install agavi/agavi</command></para>

        <para>You now probably see an error message telling you that
        <productname>PEAR</productname> was unable to install
        <productname>Phing</productname>. Agavi needs
        <productname>Phing</productname>, and tries to install it, but this
        will fail if it doesn't know <productname>Phing's</productname>
        Channel Server yet. Since discovering channels gets massively annoying
        over time, you can tell <productname>PEAR</productname> to
        automatically add channels as it comes across them:</para>

        <para><command>pear config-set auto_discover 1</command></para>

        <para>If you want to install all dependencies (i.e. including
        <productname>Creole</productname> and
        <productname>Propel</productname>), type:</para>

        <para><command>pear install --alldeps agavi/agavi</command></para>

        <para>If you're still having trouble installing things, you might have
        to change your preferred state setting in
        <productname>PEAR</productname>:</para>

        <para><command>pear config-set preferred_state beta</command></para>

        <para>Also, it is possible to obtain a specific version of
        Agavi:</para>

        <para><command>pear install agavi/agavi-0.11.0</command></para>
      </section>

      <section id="c1-installation-by_hand">
        <title id="c1-installation-by_hand-title">By Hand</title>

        <para>Installing Agavi by hand is the logical choice if you can't use
        <productname>PEAR</productname>, or if you want to bundle Agavi with
        your application. Go to the <emphasis>Downloads</emphasis> section on
        the <ulink url="http://www.agavi.org">Agavi website</ulink> to get a
        release. After unpacking the archive, you can put the
        <filename>src</filename> folder into a folder of your choice and
        adjust your include path accordingly. Don't forget to copy
        <filename>etc/agavi-dist</filename> or
        <filename>etc/agavi.bat-dist</filename> script to an
        <filename>agavi</filename> or <filename>agavi.bat</filename>
        executable into a convenient location so you can use the shell
        commands for creating projects, modules, actions etc. Keep in mind
        that you must edit the script and enter the path to your Agavi
        installation (that's the <filename>src</filename> folder you copied
        earlier) so everything works as intended.</para>

        <para>The more usual case, however, will be that you're shipping Agavi
        together with your application, either because you can't use
        <productname>Phing</productname> to install Agavi in the production
        environment, or because you want total control over what version of
        Agavi is used. In this case, copy the <filename>src</filename> folder
        to somewhere inside your application's directory structure (we
        recommend a <filename>libs</filename> folder that holds all libraries
        your app uses and that sits on the same level as the
        <filename>app</filename> and <filename>pub</filename> directories) and
        give it a different name, <filename>agavi</filename> would stand to
        reason. For that little extra something, copy the agavi-dist or
        agavi.bat-dist script again, maybe to your application root. Your
        <filename>pub/index.php</filename> can then be changed to use a
        relative path for including <filename>agavi.php</filename>, in our
        case that'd be <filename>../libs/agavi/agavi.php</filename>. Agavi
        will auto-determine and remember the path where it was loaded from,
        and works without any changes to your environment's include
        path.</para>
      </section>

      <section>
        <title>From SVN</title>

        <para>Public access to the <productname>Subversion</productname>
        repository is possible via <ulink
        url="svn://svn.agavi.org/agavi">svn://svn.agavi.org/agavi</ulink>. If
        you want to get the bleeding edge version, use
        <filename>/agavi/trunk</filename>. Specific releases are available
        through <filename>/agavi/tags</filename>. Also, you can get
        development versions of version branches (if applicable) via
        <filename>/agavi/branches</filename>.</para>

        <para>You can either perform an <command>svn checkout</command>, which
        creates <filename>.svn</filename> folders that allow you to stay up to
        date on changes in the repository via <command>svn update</command>,
        or you can simply <command>svn export</command> the contents of the
        repository without <productname>Subversion</productname> control
        folders, which is a good idea for example when you want to export a
        specific release into your own versioning control system.</para>

        <para>Once you have obtained a copy from the repository, you can
        either follow the instructions in <xref
        endterm="c1-installation-by_hand-title"
        linkend="c1-installation-by_hand" />, or you package a
        <productname>PEAR</productname> release yourself for local
        installation by first running</para>

        <para><command>phing package</command></para>

        <para>on the root directory of your checkout, followed by a</para>

        <para><command>pear package</command></para>

        <para>inside the <filename>build</filename> directory created by the
        first command. This will write a <filename>.tgz</filename> file which
        can be installed using PEAR.</para>
      </section>

      <section>
        <title>Apache Web Server Configuration</title>

        <para>Agavi doesn't require any changes to your Apache
        configuration.</para>

        <para>If you want to use the Routing without an
        <filename>index.php</filename> part in the URL path, you need
        mod_rewrite enabled, along with the respective AllowOverride options
        set. Refer to the "Removing the "index.php" Part From URLs" section in
        the Cookbook for further instructions.</para>
      </section>

      <section>
        <title>LightTPD Configuration</title>

        <para>Agavi doesn't require any changes to your Lighty
        configuration.</para>

        <para>If you want to use the Routing without an
        <filename>index.php</filename> part in the URL path, you need the
        rewrite module enabled. Refer to the "Removing the "index.php" Part
        From URLs" section in the Cookbook for further instructions.</para>

        <tip>
          <para>You may run into issues when using aliases via
          <code>alias.url</code>. If routes are generated wrong or you see
          other error messages, disable(!) the
          <code>broken-scriptfilename</code> directive.</para>
        </tip>
      </section>

      <section>
        <title>Microsoft IIS Configuration</title>

        <para>Agavi doesn't require any changes to your IIS
        configuration.</para>

        <para>If you want to use the Routing, you'll have to disable a feature
        of IIS that checks if a file exists before trying to execute it. To do
        that, follow these steps:</para>

        <para><orderedlist>
            <listitem>
              <para>Go to <guimenuitem>Control Panel</guimenuitem> -&gt;
              <guimenuitem>Administrative Tools</guimenuitem> -&gt;
              <guimenuitem>Internet Information Services</guimenuitem></para>
            </listitem>

            <listitem>
              <para>Pick your Website entry from the list, right-click it, and
              select <guimenuitem>Properties</guimenuitem></para>
            </listitem>

            <listitem>
              <para>Choose the <guimenuitem>Home Directory</guimenuitem>
              tab</para>
            </listitem>

            <listitem>
              <para>Click the <guibutton>Configuration...</guibutton> button
              near the bottom right of the box</para>
            </listitem>

            <listitem>
              <para>Select the <filename>.php</filename> extension entry in
              the list and click the <guibutton>Edit</guibutton> button</para>
            </listitem>

            <listitem>
              <para>Disable the checkbox that controls the checking for file
              existance function in the bottom left</para>
            </listitem>
          </orderedlist>If you want to use the Routing without an index.php
        part in the URL path, you need a plugin for IIS that mimics
        mod_rewrite's behavior, such as <ulink
        url="http://www.isapirewrite.com/">ISAPI_Rewrite</ulink>. Refer to the
        "Removing the "index.php" Part From URLs" section in the Cookbook for
        further instructions.</para>
      </section>
    </section>

    <section>
      <title>The Sample Application</title>

      <para>Agavi comes with a (very simple) sample application. To make it
      work, all you have to do is adjust
      <filename>samples/pub/index.php</filename> to point to
      <filename>agavi.php</filename>, whereever it's installed, and maybe
      change permissions of <filename>samples/app/cache</filename> so it's
      writeable by your web server or PHP. Then, fire it up in your browser
      and play around with it.</para>

      <para>While not overly complex, the sample application's code should
      give you a basic understanding of what a software project in Agavi would
      look like in terms of structure.</para>
    </section>

    <section>
      <title>Creating Your First Agavi Application</title>

      <para>Once you have everything set up, create a new directory for your
      application and, in there, run</para>

      <para><command>agavi project</command></para>

      <para>Follow the on-screen instructions. In case of doubt, confirm the
      default values given by the wizard. You now likely have to change the
      permissions for the cache folder so it's writeable to PHP or the web
      server process:</para>

      <para><command>chmod a+rwx app/cache</command></para>

      <warning>
        <para>"a+rwx" equals "0777" and means the cache directory and all
        files in there will be read- and writeable by everyone. Remember that
        the compiled configs will, for example, still contain your database
        credentials in clear text. It might be a good idea to use the minimum
        required permissions so the folder is readable only by PHP or the Web
        Server. You have been warned.</para>
      </warning>

      <para>And that's it! You're done! Fire up your browser and point it to
      the <filename>pub</filename> directory of your application. If you see a
      blank page, everything went fine. Of course, a blank page isn't really
      satisfying or anything, so you might want to edit
      <filename>app/modules/Default/templates/IndexSuccess.php</filename> and
      put some text in there, like the infamous "Hello World". Back to the
      browser and reload, et voila!</para>

      <para>If you want to add more Modules, Actions or Models to your
      application, you can use the <command>agavi</command> script
      again:</para>

      <para><command>agavi module</command></para>

      <para><command>agavi action</command></para>

      <para><command>agavi model</command></para>

      <para>The script uses code templates to generate all the files. You can
      use your custom code templates, too. Just put them whereever you like
      (look at <filename>src/buildtools</filename> to learn what templates
      there are and what the structure and file names look like). Then, create
      a new file called <filename>build.properties</filename> and add one line
      to it:</para>

      <para><programlisting>templates.dir = /my/project/path/mycodetemplates</programlisting>Of
      course, you don't have to provide custom versions of
      <emphasis>all</emphasis> code templates. Agavi will fall back to the
      bundled templates if it couldn't find a specific one in the path you
      specified.</para>

      <para>Also, you can have per-module code templates. Add a
      <filename>modules</filename> directory to your code templates folder,
      and then add a new folder with the same name as the module. Now you can
      add a code template in there, and it will only be used when generating
      something for that specific module.</para>

      <para>In addition to the templates directory, you can specify the
      extension used for the page template files (like
      <filename>IndexSuccess.php</filename>). The default extension is
      <filename>.php</filename>. The extension is applied both to the code
      template file name and to the name of the template that is written.
      Example:</para>

      <para><programlisting>template.extension = .tpl</programlisting>If you
      create an action called "Index" and a view called "Success", the command
      line script will copy <filename>Template.tpl.tmpl</filename> to
      <filename>IndexSuccess.tpl</filename> for you.</para>

      <para>In case you're migrating from an Agavi 0.10 project where the app
      dir name is still <filename>webapp</filename>, or you simply don't want
      that directory in your project to be called <filename>app</filename>,
      you can customize this, too:</para>

      <para><programlisting>app.dirname = webapp</programlisting></para>
    </section>
  </chapter>

  <chapter>
    <title>Agavi Basics</title>

    <section>
      <title>System Architecture</title>

      <para></para>
    </section>

    <section>
      <title>Elements of an Application</title>

      <para>modules</para>

      <para>actions</para>

      <para>views and templates</para>

      <para>models and global models</para>

      <para>config files</para>
    </section>

    <section>
      <title>Environments and Contexts</title>

      <para>The framework is started by bootstrapping an environment. Typical
      environments would be "development", "testing" or "production". You may
      configure any number of environments, but only one of them is used
      during execution.</para>

      <para>Environments allow for extremely fine-grained settings for each
      machine an application is running on. The various Environments may have
      different database configurations, logging settings and levels, debug
      settings and even filters or factories. Also, each developer in a team
      may have his own Environment for development, with his or her own
      database settings etc. which eliminates the need for people constantly
      having to change their settings, accidentally committing changed files
      to SCM repositories or missing changes because configuration files were
      set to <emphasis>ignore</emphasis>.</para>

      <para>A Context encapsulates a running instance of the framework. While
      any aspect of the framework, even system settings and autoloads may be
      configured per Environment, you're a bit more restricted in Context
      configuration, and that's intentional. A Context's job is to hold the
      proper implementations that are needed to execute the application in the
      current <emphasis>context</emphasis> (therefore the name), such as "web"
      for normal requests to an application through a browser, "xmlrpc" for an
      XMLRPC interface of an application, or "console" for a Context that
      exposes the application to the command line.</para>

      <para>All configuration files support the configuration per Environment
      and Context (if applicable) without any performance disadvantage - Agavi
      compiles them into highly optimized variants for each Environment and
      Context when needed for minimum overhead.</para>

      <section>
        <title>A Closer Look at Context Initialization</title>

        <para>Agavi's context class (AgaviContext) is initialized according to
        settings defined in <filename>factories.xml</filename>. Normally you
        don't have to worry about how it is done but if you decide to
        specialize some of the Agavi's core classes the order of
        initialization might become important.</para>

        <para>Agavi's core classes are initialized in the following order by
        default:<orderedlist>
            <listitem>
              <para>DatabaseManager</para>
            </listitem>

            <listitem>
              <para>SessionStorage</para>
            </listitem>

            <listitem>
              <para>ValidatorManager</para>
            </listitem>

            <listitem>
              <para>User</para>
            </listitem>

            <listitem>
              <para>LoggerManager</para>
            </listitem>

            <listitem>
              <para>Controller</para>
            </listitem>

            <listitem>
              <para>Request</para>
            </listitem>

            <listitem>
              <para>Routing</para>
            </listitem>
          </orderedlist>This means that for example a User implementation
        cannot use <classname>LoggerManager</classname> in its
        <function>initialize</function> method. The initialization order of
        these framework core classes is defined in
        <classname>AgaviFactoryConfigHandler</classname> and it cannot be
        changed.</para>
      </section>
    </section>

    <section>
      <title>How a Request is Processed</title>

      <para>If you call an URL that is handled by pub/index.php, Agavi will
      bootstrap the specified (or default) Environment and then create an
      instance of the specified (or default) Context (this instantiation sets
      up all of the core components of the framework). Finally, the request is
      dispatched from the Context's Controller instance.</para>

      <para>The dispatch method first executes the routing (if enabled) to
      determine the Module/Action that are to be executed. Then, a filter
      chain containing all Global Filters is created, and the DispatchFilter
      is added to that chain as the last element. Each filter will be called
      in nested sequence, with the last filter being the DispatchFilter, which
      calls the first forward to the requested Module and Action. After that,
      the control passes back through the filters to the dispatch method,
      which sends the Response contents and exits. Filters are given the
      global Response as a parameter to work with, so they can modify content,
      send Cookies and so on.</para>

      <para>When a forward happens, Agavi does some checks to determine if the
      requested Module/Action exists, if the Module the Action belongs to is
      enabled and so on. Then, a filter chain is created, with the first
      filter being the Security Filter if security is enabled. This filter
      will forward unauthenticated users to the default "Login Action" if a
      requested Action requires authentication, and also prevent access of
      Actions an user doesn't have sufficient credentials for by forwarding to
      the default "Secure Action". After that, the Action Filters are added to
      the chain, followed by the Action Filters defined by the Action's
      Module. The last filter in the chain is the Execution Filter, usually
      either AgaviExecutionFilter or AgaviCachingExecutionFilter. Again, each
      filter in the chain is called and may do modifications to the Response
      instance, which is a new one for each Action that is processed and will
      be merged to the global Response by the Controller once control returns
      to the forward method.</para>

      <para>The Execution Filter, once reached, will handle Validation, run
      the Action (or skip execution if the Action doesn't serve the Request
      method), determine the View to execute and then execute the View and,
      after that, start the rendering of the output by creating another filter
      chain containing all the defined Rendering Filters and, as the last
      element, the designated Renderer instance that will take care of
      rendering the template. This functionality might be extended by other
      Execution Filter implementations; for example, the
      CachingExecutionFilter will try to load a cached version of the Action
      and skip execution altogether if possible, resulting in a massive
      performance increase.</para>
    </section>

    <section>
      <title>Configuration</title>

      <section>
        <title>Basic Configuration Concepts</title>

        <para>Agavi's standard configuration file format is XML, but you can
        use any format you like for your custom files (you'll probably have to
        write a parser, though). Each configuration file may also have a
        parent, which is also read during compilation, and the two files get
        merged together, with the child file overwriting settings from the
        parent. Of course, the parent file may again reference a parent and so
        on, which is an excellent way to easily enforce common settings etc
        across projects.</para>

        <para>All configuration files are compiled into a very efficient
        format by their Configuration Handler to maximize performance. Once
        this compilation has occured, the compiled version will be used until
        the configuration file is modified. Then, the compilation will occur
        again. If Agavi is running in debug mode, configuration files are
        always re-compiled on each request.</para>
      </section>

      <section>
        <title>General Format and Environment-/Context-Specific Blocks</title>

        <para>Each configuration file should have an XML prolog. The default
        encoding is UTF-8, but you can set any encoding you like; Agavi will
        then translate encodings during compilation. Note that this requires
        the iconv extension, unless you're using ISO-8859-1, which can be
        handled without the help of iconv.</para>

        <para>The root element of each configuration file is
        <code>&lt;configurations&gt;</code>. It may have an optional attribute
        called "parent" which can be used to specify the parent configuration
        file. This root element must contain at least one
        <code>&lt;configuration&gt;</code> element, which then contains the
        actual configuration directives.</para>

        <para>The reason why <code>&lt;configurations&gt;</code> contains
        <code>&lt;configuration&gt;</code> elements is that a
        <code>&lt;configuration&gt;</code> block can be specific to an
        environment, a context, or both. To achieve this, pass a space
        separated list of names to the "enviroment" and/or "context"
        attributes of the tag. This way, you can write very fine-grained
        config files to change behavior according to the situation. For
        example, the basic <filename>settings.xml</filename> file has
        different settings per environment (example simplified):</para>

        <para><programlisting>&lt;configurations&gt;
  &lt;configuration&gt;
    &lt;settings&gt;
      &lt;setting name="debug"&gt;false&lt;/setting&gt;
    &lt;/settings&gt;
  &lt;/configuration&gt;
  &lt;configuration environment="development"&gt;
    &lt;settings&gt;
      &lt;setting name="debug"&gt;true&lt;/setting&gt;
    &lt;/settings&gt;
  &lt;/configuration&gt;
&lt;/configurations&gt;</programlisting>In this example, debug is always
        disabled unless the environment is set to "development". Note that
        environments and contexts do not have to be declared anywhere.
        Bootstrapping an environment or getting a context instance "activates"
        the environment or context. If you have declared settings specific to
        them, they'll be used. If not, the "global" settings (i.e. those in
        <code>&lt;configuration&gt;</code> blocks without further attributes)
        take effect.</para>

        <para>Environment-specific settings overwrite generic ones,
        context-specific settings overwrite environment-specific ones, and
        environment- and context-specific settings overwrite all of the
        before.</para>

        <para>You'll also soon notice that for each element that may occur
        multiple times, the parent element is the plural form of the name.
        <code>&lt;route&gt;</code> elements sit inside
        <code>&lt;routes&gt;</code>, <code>&lt;mouse&gt;</code> elements
        inside <code>&lt;mice&gt;</code> and so on.</para>
      </section>

      <section>
        <title>Parameter blocks</title>

        <para>Many tags in configuration files accept a &lt;parameters&gt;
        block as the child element which is usually used to specify
        initialization arguments to the respective resource. Each
        &lt;parameter&gt; inside the &lt;parameters&gt; container has a name,
        specified via the attribute "name", and a value. This value can,
        however, again be a &lt;parameters&gt; block. This inner block often
        does not need name attributes for the &lt;parameter&gt; elements,
        because it usually is simply a list of values for the parent
        &lt;parameter&gt;. Here's an example:</para>

        <para><programlisting>&lt;parameters&gt;
  &lt;parameter name="firstparam"&gt;a value goes here&lt;/parameter&gt;
  &lt;parameter name="secondparam"&gt;
    &lt;parameters&gt;
      &lt;parameter&gt;foo&lt;/parameter&gt;
      &lt;parameter&gt;bar&lt;/parameter&gt;
    &lt;/parameters&gt;
  &lt;/parameter&gt;
&lt;/parameters&gt;</programlisting></para>
      </section>

      <section>
        <title>Value Substitution and Configuration Directives</title>

        <para>Parameter blocks, but also many other attributes and values may
        contain the name of a configuration directive, wrapped in percent
        signs. The following parameter will contain the path name of the
        project's app dir followed by "/fubar", because the directive is
        expanded before assignment:</para>

        <para><programlisting>&lt;parameter name="path"&gt;%core.app_dir%/fubar&lt;/parameter&gt;</programlisting>Also,
        in parameter blocks and sometimes in other locations, boolean
        expressions are expanded to actual boolean values:</para>

        <para><programlisting>&lt;parameter name="use_logging"&gt;false&lt;/parameter&gt;</programlisting>Will
        assign boolean false to the parameter "use_logging".</para>
      </section>
    </section>

    <section>
      <title>Request and Routing</title>

      <para>request parameters and attributes, attribute namespaces, errors,
      cookies.</para>

      <para>routing functionality, getting info from the routing, generating
      urls</para>
    </section>

    <section>
      <title>Actions and Models</title>

      <para>what they do and contain (business logic at different
      levels)</para>

      <para>actions: execution, execution methods, serving request methods,
      default view name, validation, security</para>
    </section>

    <section>
      <title>Views, Renderers and Templates</title>

      <para>what they do and contain (only presentational stuff)</para>

      <para>views: execution, execution methods, where you set the output type
      (initialize at the latest)</para>

      <para>templates and renderers: engines, variable naming etc</para>
    </section>

    <section>
      <title>Output Types and Response</title>

      <para>output types, what's the point of it, explain how easy it is to
      add a new one etc</para>

      <para>response: why they exist, whey they are isolated</para>
    </section>

    <section>
      <title>Session Handling and Security</title>

      <para>explain the storage, explain why you never use it directly</para>

      <para>explain the user, how it works, what you can do with it, how you
      do authentication, credentials etc</para>
    </section>

    <section>
      <title>Validation</title>

      <para>why validation, how to validate, explain the drop-in character,
      explain what it can also do (normalization etc), how sweet it is with
      the FormPopulationFilter</para>
    </section>

    <section>
      <title>Filters</title>

      <para>Each Filter calls the next one, making Filter Chains work like a
      <ulink url="http://en.wikipedia.org/wiki/Matryoshka_doll">Matryoshka
      Doll</ulink>.</para>
    </section>

    <section>
      <title>Databases</title>

      <para>how to retrieve a connection, why do it using the framework,
      propel</para>
    </section>

    <section>
      <title>Logging</title>

      <para>why logging, how to do it, levels, loggers, appenders,
      layouts</para>
    </section>
  </chapter>

  <chapter>
    <title>Agavi Reference</title>

    <section>
      <title>Action</title>

      <para></para>
    </section>

    <section>
      <title>Configuration</title>

      <para></para>
    </section>

    <section>
      <title>Controller</title>

      <para></para>
    </section>

    <section>
      <title>Core/Context</title>

      <para></para>
    </section>

    <section>
      <title>Databases</title>

      <para></para>
    </section>

    <section>
      <title>Exceptions</title>

      <para></para>
    </section>

    <section>
      <title>Filters</title>

      <para></para>
    </section>

    <section>
      <title>Logging</title>

      <para></para>
    </section>

    <section>
      <title>Models</title>

      <para></para>
    </section>

    <section>
      <title>Renderers</title>

      <para></para>
    </section>

    <section>
      <title>Request</title>

      <para></para>
    </section>

    <section>
      <title>Response</title>

      <para></para>
    </section>

    <section>
      <title>Routing</title>

      <para></para>
    </section>

    <section>
      <title>Storage</title>

      <para></para>
    </section>

    <section>
      <title>User</title>

      <para></para>
    </section>

    <section>
      <title>Validation</title>

      <para></para>
    </section>

    <section>
      <title>Views</title>

      <para></para>
    </section>
  </chapter>
</book>