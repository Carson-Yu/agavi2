<?xml version="1.0" encoding="UTF-8"?>
<configurations xmlns="http://agavi.org/agavi/1.0/config" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:yay="http://agavi.org/sampleapp" targetNamespace="http://agavi.org/sampleapp">
	
	<configuration context="web">
		<routes>
			<!-- matches "/de" or "/en" at the beginning of the URL and uses either value to set the locale, with British Pounds Sterling as the currency. Execution will not stop if this route matches. If it matches, the matched fragment will be stripped from the input URL for the following routes. This route has the "imply" flag, which means that it will be included in generated routes even if the gen() call does not explicitly mention it. The matched "language" parameter will not be available as a request parameter in the code, because it's "ignore"d -->
			<route pattern="^/({locale:[a-z]{2}(_[A-Z]{2})?})" stop="false" imply="true" cut="true" locale="${locale}@currency=GBP" callback="AgaviSampleAppLanguageRoutingCallback">
				<ignores>
					<ignore>locale</ignore>
				</ignores>
			</route>
			
			<!-- If the HTTP Accept: header contains "application/xhtml+xml", set the output type to "xhtml". Look at output_types.xml for the declaration of that output type. Execution will not stop if this route matches. -->
			<route pattern="application/xhtml+xml" source="_SERVER[HTTP_ACCEPT]" output_type="xhtml" stop="false" />
		
			<route name="disabled" pattern="^/disabled" module="Disabled" action="Index" />
			
			<route name="login" pattern="^/login" module="%actions.login_module%" action="%actions.login_action%">
				<routes>
					<!-- A nested route. This will match the URL "/login/logout" - matched fragments from the parent route are stripped from the URL string for child routs. -->
					<route name="logout" pattern="^/logout" module="%actions.login_module%" action="Logout" />
				</routes>
			</route>
			<route name="secure2" pattern="^/secure2" module="Default" action="Secure2" />
			<route name="secure" pattern="^/secure" module="Default" action="Secure1" />
			
			<!-- This route uses a prefix and a postfix for a value, and the entire block is optional. That means that you can omit "buy-cheap-whatever-at-agavi-dot-org" from the URL, and the route still matches! If there is no value given for the parameter "name" when you enerate a route, the entire block will be missing. Since we specified a default value here, you have to explicitly set that parameter to 'null' when generating, so it gets skipped. -->
			<route name="search_engine_spam" pattern="^/products(/buy-cheap-{name:[\S\s]+}-at-agavi-dot-org)?/(id:\d+)" module="Default" action="SearchEngineSpam">
				<defaults>
					<default for="name">/buy-cheap-{chainsaws}-at-agavi-dot-org</default>
				</defaults>
			</route>
			
			<!-- The last route in case the input URL is just "/". -->
			<route name="index" pattern="^/$" module="%actions.default_module%" action="%actions.default_action%" />
			
			<!-- If no route matched here, the 404 action will be used. You could change that behavior by setting the last route above to use an empty pattern. -->
		</routes>
	</configuration>
	
	<configuration context="soap">
		<routes>
			<!-- SOAP calls include the name of a remote method to call. The WebserviceRouting applies patterns to this method name, not to the URL of the request. We set the request method to "read" here so executeRead() is run in the Action. -->
			<route pattern="^getItemPrice$" module="Default" action="SearchEngineSpam" method="read">
				<wsdl:input>
					<wsdl:part name="name" type="xsd:string" />
				</wsdl:input>
				<wsdl:output>
					<wsdl:part name="price" type="xsd:float" />
				</wsdl:output>
			</route>
		</routes>
	</configuration>
	
	<configuration context="wsdl">
		<routes>
			<route pattern="(dummy:.*)" module="Default" action="SendWsdl" />
		</routes>
	</configuration>
	
	<configuration context="xmlrpc">
		<routes>
			<!-- XMLRPC calls include the name of a remote method to call. The WebserviceRouting applies patterns to this method name, not to the URL of the request. We set the request method to "read" here so executeRead() is run in the Action. -->
			<route pattern="^getItemPrice$" module="Default" action="SearchEngineSpam" method="read" />
		</routes>
	</configuration>
</configurations>
