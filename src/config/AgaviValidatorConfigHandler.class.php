<?php

// +---------------------------------------------------------------------------+
// | This file is part of the Agavi package.                                   |
// | Copyright (c) 2003-2006 the Agavi Project.                                |
// |                                                                           |
// | For the full copyright and license information, please view the LICENSE   |
// | file that was distributed with this source code. You can also view the    |
// | LICENSE file online at http://www.agavi.org/LICENSE.txt                   |
// |   vi: set noexpandtab:                                                    |
// |   Local Variables:                                                        |
// |   indent-tabs-mode: t                                                     |
// |   End:                                                                    |
// +---------------------------------------------------------------------------+

/**
 * AgaviValidatorConfigHandler allows you to register validators with the system.
 *
 * @package    agavi
 * @subpackage config
 *
 * @author     Uwe Mesecke <uwe@mesecke.net>
 * @copyright  (c) Authors
 * @since      0.11.0
 *
 * @version    $Id$
 */
class AgaviValidatorConfigHandler extends AgaviConfigHandler
{
	/**
	 * Execute this configuration handler.
	 *
	 * @param      string An absolute filesystem path to a configuration file.
	 *
	 * @return     string Data to be written to a cache file.
	 *
	 * @throws     <b>AgaviUnreadableException</b> If a requested configuration file
	 *                                             does not exist or is not readable.
	 * @throws     <b>AgaviParseException</b> If a requested configuration file is
	 *                                        improperly formatted.
	 *
	 * @author     Uwe Mesecke <uwe@mesecke.net>
	 * @since      0.11.0
	 */
	public function execute($config, $context = null)
	{
		// get validator name->class map and defaults
		$filename = AgaviConfig::get('core.config_dir') . '/validators.xml';
		if(!is_readable($filename)) {
			$filename = AgaviConfig::get('core.system_config_dir') . '/validators.xml';
		}
		
		$validatorConfig = $this->orderConfigurations(AgaviConfigCache::parseConfig($filename, true, $this->getValidationFile())->configurations, AgaviConfig::get('core.environment'), $context);

		$classMap = array();
		$defaults = array();
		
		foreach($validatorConfig as $cfg) {
			foreach($cfg->validators as $validator) {
				$classMap[$validator->getAttribute('name')] = $validator->getAttribute('class');
			}
			
			foreach($cfg->defaults as $default) {
				if (!isset($defaults[$default->getAttribute('name')])) {	
					$defaults[$default->getAttribute('name')] = array();
				}
				foreach($default->parameters as $param) {
					$defaults[$default->getAttribute('name')][$param->getAttribute('name')] = $param->getValue();
				}
			}
		}
		
		// parse the config file
		$configurations = $this->orderConfigurations(AgaviConfigCache::parseConfig($config, true, $this->getValidationFile())->configurations, AgaviConfig::get('core.environment'), $context);
		
		$code = $this->getValidatorArray($configurations[0]->validators, $classMap, $defaults, 'validatorManager');
		
		// compile data
		$retval = "<?php\n" .
				  "// auto-generated by AgaviValidatorConfigHandler\n" .
				  "// date: %s\n%s\n?>";
		$retval = sprintf($retval, date('m/d/Y H:i:s'), join("\n", $code));

		return $retval;
	}
	
	/**
	 * Builds an array of php code strings, each of them creating a validator
	 * 
	 * @param      array  ConfigValueHolders
	 * @param      array  Name -> Class map
	 * @param      array  default parameters
	 * @param      string name of parent
	 * 
	 * @return     array php code blocks that register the validators
	 * 
	 * @author     Uwe Mesecke <uwe@mesecke.net>
	 * @since      0.11.0
	 */
	public function getValidatorArray($configs, $classMap, $defaultParameters, $parent) {
		$retarray = array();
		$stdSeverity = ($configs->hasAttribute('severity')) ? $configs->getAttribute('severity') : 'error';

		foreach($configs as $cfg) {
			if(!isset($classMap[$cfg->getAttribute('class')])) {
				//throw new AgaviValidatorException('unknown validator found: '.$cfg->getAttribute('class'));
				continue;
			} else {
				$class = $classMap[$cfg->getAttribute('class')];
			}
			
			// setting up parameters
			$parameters = array('severity' => $stdSeverity);
			if(isset($defaultParameters[$class])) {
				$parameters = array_merge($parameters, $defaultParameters[$class]);
			}
			$parameters = array_merge($parameters, $cfg->getAttributes());
			unset($parameters['class']);			
			if(isset($cfg->parameters)) {
				foreach($cfg->parameters as $parm) {
					$parameters[$parm->getAttribute('name')] = $parm->getValue();
				}
			}

			// building code line
			$ret = '$'.$parent.'->addChild(';
			
			if(isset($cfg->validators)) {
				// if validator is operator
				$operator = $parent.'_o';
				// create operator
				array_push($retarray, '$'.$operator.' = new '.$class.'($'.$parent.', '.var_export($parameters, true).');');
				// create child validators
				foreach($this->getValidatorArray($cfg->validators, $classMap, $defaultParameters, $operator) as $line) {
					array_push($retarray, $line);
				}
				// and finally put operator into manager
				$ret .= '$'.$operator;
			} else {
				// create new validator
				$ret .= 'new '.$class.'($'.$parent.', '.var_export($parameters, true).')';
			}
			$ret .= ');';
			
			// put code line into array
			array_push($retarray, $ret);
		}
		
		return $retarray;
	}
}

?>