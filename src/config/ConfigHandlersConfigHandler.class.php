<?php

// +---------------------------------------------------------------------------+
// | This file is part of the Agavi package.                                   |
// | Copyright (c) 2003-2006 the Agavi Project.                                |
// | Based on the Mojavi3 MVC Framework, Copyright (c) 2003-2005 Sean Kerr.    |
// |                                                                           |
// | For the full copyright and license information, please view the LICENSE   |
// | file that was distributed with this source code. You can also view the    |
// | LICENSE file online at http://www.agavi.org/LICENSE.txt                   |
// |   vi: set noexpandtab:                                                    |
// |   Local Variables:                                                        |
// |   indent-tabs-mode: t                                                     |
// |   End:                                                                    |
// +---------------------------------------------------------------------------+

/**
 * AgaviConfigHandlersConfigHandler allows you to specify configuration handlers
 * for the application or on a module level.
 *
 * @package    agavi
 * @subpackage config
 *
 * @author     Dominik del Bondio <ddb@bitxtender.com>
 * @copyright  (c) Authors
 * @since      0.11.0
 *
 * @version    $Id$
 */
class AgaviConfigHandlersConfigHandler extends AgaviConfigHandler
{

	/**
	 * Execute this configuration handler.
	 *
	 * @param      string An absolute filesystem path to a configuration file.
	 *
	 * @return     string Data to be written to a cache file.
	 *
	 * @throws     <b>AgaviUnreadableException</b> If a requested configuration file
	 *                                             does not exist or is not readable.
	 * @throws     <b>AgaviParseException</b> If a requested configuration file is
	 *                                        improperly formatted.
	 *
	 * @author     Dominik del Bondio <ddb@bitxtender.com>
	 * @since      0.11.0
	 */
	public function execute($config, $context = null)
	{
		$data = $this->parseFile($config);
		if(($sysConfDir = AgaviConfig::get('core.system_config_dir'))) {
			$data = array_merge($this->parseFile($sysConfDir . '/config_handlers.xml'), $data);
		}


		// compile data
		$retval = "<?php\n" .
				  "// auth-generated by AgaviConfigHandlersConfigHandler\n" .
				  "// date: %s\n%s\n?>";

		$retval = sprintf($retval, date('m/d/Y H:i:s'),
						  implode("\n", $data));

		return $retval;

	}

	protected function parseFile($config)
	{
		$conf = AgaviConfigCache::parseConfig($config, false);

		// init our data arrays
		$data     = array();
		$environment = AgaviConfig::get('core.environment');

		foreach($conf->configurations as $cfg)
		{
			$env = $cfg->hasAttribute('environment') ? $cfg->getAttribute('environment') : $environment;

			if($env != $environment)
				continue;

			// let's do our fancy work
			foreach($cfg->handlers as $handler) {
				$parameters = 'null';
				$pattern = $handler->getAttribute('pattern');
				if($pattern == '%core.config_dir%/autoload.xml')
					$parameters = '';

				$category = $this->replaceConstants($pattern);

				$class = $handler->class->getValue();

				if($handler->hasChildren('params')) {
					$parameters = '';

					// create parameters
					foreach($handler->params->getChildren() as $name => $param)
					{
						$name = $param->getName();
						// if the parameter name needs to be retrieved from the name attribute of the tag
						if($name == 'param' && $param->hasAttribute('name')) {
							$name = $param->getAttribute('name');
						}

						// the parameter is an array of items
						if($param->hasChildren()) {
							$paramData = 'array(';
							foreach($param->getChildren() as $child)
							{
								$paramData .= sprintf("'%s', ", $child->getValue());
							}
							$paramData .= ')';
						} else {
							$paramData = sprintf("'%s'", $param->getValue());
						}
						$parameters .= sprintf("'%s' => %s, ", $name, $paramData);
					}

					$parameters = sprintf('array(%s)', $parameters);
				}

				// append new data
				$tmp    = "self::\$handlers['%s'] = new %s();";
				$data[] = sprintf($tmp, $category, $class);

				if($parameters != 'null') {
					// since we have parameters we will need to init the handler
					$tmp    = "self::\$handlers['%s']->initialize(%s);";
					$data[] = sprintf($tmp, $category, $parameters);
				}
			}
		}

		return $data;
	}

}

?>